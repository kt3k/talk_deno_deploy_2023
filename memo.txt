技術的側面
- サーバーレス
- JavaScript と Wasm をサポート
- API は Web 互換 API + Deno 互換 API
- 35リージョンに自動配信、Anycast で一番近いリージョンに自動的にルーティングされる
- コールドスタートは Tokyo は 170ms 程度 (EU, US, ASIA は大体この前後の数値)
- 何が出来る?
  - HTTP リクエストのサーブ
  - 外向き HTTP リクエスト (fetch)
  - 外向き TCP コネクション (Deno.connect) mysql, postgres, redis などと直接通信可能
  - ファイルの読み取り (Cloud Storage バックエンドへのネットワークアクセスに読み替えられる)
- 中身について
  - よくある誤解: Deno Deploy って Cloudflare Workers で動いてるんでしょ?
    -> 違います
    -> 例えば Deno Deploy の方がソースコード量の上限が4倍多い
    -> 外向き TCP は Cloudflare Workers は未実装
  - Linux VM
  - Deploy runtime / Deploy supervisor
Deno Deploy はどういう使い方をして欲しいか
- プロクシなどの用途も良いですが・・・
- アプリケーションを直接デプロイして欲しい
フレームワーク
- Fresh
  - 公式
  - Preact ベースで Next.js に似たフレームワーク
- Aleph
  - React ベースで Next.js に似たフレームワーク
  - Remix の要素も取り込んでいる
- Hono
  - Bun, Deno, Cloudflare workers, etc などいろんなランタイムで動くフレームワーク
  - ルーターが速い (っぽい)
  - カバーする範囲は express 相当 (UI / View は自前で用意する必要がある)
  - 移植性を担保してコードを書きたい場合に良いかも?
Deno Deploy の利用例
- Deno のホームページ https://deno.land/
- サードパーティのモジュールレジストリ全体なども含む
会社の戦略的側面
- Deno 社は、もう一つのメインプロダクトの Deno CLI ではマネタイズしていない。
- Deno Deploy は Deno 社が唯一マネタイズするプロダクト
- Deno Deploy はサーバーホスティングのマクドナルドを目指す by ライアン
マーケット内での立ち位置


















<!--


---
# Deno Deploy

- Deno 社のもう一つのメインプロダクトである Deno CLI は OSS で、マネタイズしていない
- Deno Deploy は Deno 社がマネタイズする唯一のプロダクト

---
# Deno Deploy の

- アップロードされたサーバーレス関数は世界25リージョンに自動的に分散ホストされる (cf. [Anycast](https://en.wikipedia.org/wiki/Anycast))

<img src="./assets/regions.png" width="750" />

---
# Deno Deploy の特徴
- ベータ期間中は無料。正式リリース後もある程度の無料枠がある予定。

https://deno.com/deploy

---
class: center, middle, inverse
# Deno と Deno Deploy の関係

---
# Deno の Architecture

<img src="./assets/schema.png" width="500" />

- Deno は deno_core + Ops という構成をしている
- Ops を差し替える事で別の API を持った JavaScript runtime を作れるようになっている

---

# Deno と Deno Deploy の関係

```
Deno =
  deno_core
  + ops for Deno
  + tools

Deno Deploy =
  deno_core
  + ops for Deno Deploy
  + builtin server
```

大雑把にいうと deno_core の ops 部分を差し替えたものが Deno Deploy

---

# Deno と Deno Deploy の関係

共通すること
- モジュール解決 (URL import)
- TS サポート
- Web API ex. fetch, WebSocket, etc


---

# Deno と Deno Deploy の関係

違うこと
- OS の機能を直接使うような API は Deno Deploy にはない。 例. ファイル操作, サブプロセス起動 etc

---
class: middle, center, inverse
# サンプルコード

---

# サンプルコード

```ts
addEventListener("fetch", (e) => {
  e.respondWith(
    new Response("Hello, world!", {
      status: 200,
    }), 
  );  
});
```

---

# サンプルコード sift

```ts
import {
  serve
} from "https://deno.land/x/sift@0.3.5/mod.ts";

serve({
  "/": () => new Response("hello world"),
  "/blog/:slug": (request, params) => {
    const post = `Hello, you visited ${params.slug}!`;
    return new Response(post);
  },
  // 上記のルートに合わなかった場合のルート
  404: () => new Response("not found"),
});
```

- 簡単なルーターを持ったライブラリの sift

---

# サンプルコード sift

```ts
import {
  h, json, jsx, serve
} from "https://deno.land/x/sift/mod.ts";

const App = () => (
  <div>
    <h1>Hello world!</h1>
  </div>
);
serve({
  "/": () => jsx(<App />),
  "/api": () => json({ message: "Hello world" }),
});
```

- JSX をレンダリングする機能もあり

---

# サンプルコード oak

```ts
import {
  Application
} from "https://deno.land/x/oak/mod.ts";

const app = new Application();

app.use((ctx) => {
  ctx.response.body = "Hello world!";
});

addEventListener("fetch", app.fetchEventHandler());
```

- Oak を使って普通の Express, Koa スタイルの開発も可能

---
class: middle, center, inverse
# 他のサービスとの比較

---
class: middle, center
# vs AWS Lambda

# vs AWS Lambda@Edge

# vs Cloudflare Workers

---

## vs AWS Lambda

- Lambda は他の AWS の種々のサービスと組み合わせて使うものなので、単純な比較は出来ない。
- API Gateway + Lambda という使い方と Deno Deploy で比較するとかなり似てる
- Lambda が1リージョンに限定されるのに対して、Deno Deploy はグローバルに分散ホストされる点が大きく違う

---

## vs AWS Lambda@Edge

- Lambda@Edge は Deno Deploy と同じく 20+リージョンに自動分散ホストされる
- が、Lambda@Edge はあくまで CloudFront ありきのサービスなので、Lambda@Edge だけでアプリケーションを作る事には適さない。
- Deno Deploy は Heroku のように、単体で完結したアプリケーションのプラットフォームになることを志向したサービス。

---

## vs Cloudflare Workers

- 一番 Deno Deploy に似ているサービスで、本当の意味での競合と言えるサービス
- リージョン数も全世界200+箇所に自動デプロイされる (Deno Deploy は25リージョン)
- import の解決はされない、TS はサポートされていない (ので、自前でビルドが必要) など、開発体験の面で機能差分がある。

---
class: middle, center

Deno Deploy が気になった人は<br />是非使ってみてください

https://deno.com/deploy


-->

